#ifndef TEXTURE_H_
#define TEXTURE_H_

#include <string>
#include <vector>

class Texture
{
public:

    /// \brief Init member variables
    Texture();

    /// \brief Destructor
    ~Texture();

    /// \brief Load backgroud texture -- TODO
    /// \param png_file - png image full file name
    /// \return boolean value
    bool load_bg( const std::string& png_file );

    /// \brief Add a new texture, loads it form pgn-file, sets type/mask -- TODO 
    /// \param mask - texture type identifier
    /// \param png_file - png image full file name
    /// \return index or -1 - on error
    int add( unsigned mask, const std::string& png_file );

    /// \brief Deletes loaded textures, 0-s parameters
    void clear( void );


    // Getters

    /// \brief Get random texture from existing texture array
    unsigned get_random( void ) const;
    
    /// \brief Loop through existing textures
    unsigned get_next( void ) const;

    /// \brief Get current texture index from the array
    /// \return index of the std::vector (loaded gem textures)
    size_t get_current( void ) const;

    /// \brief Get background ID (generated by OpenGL)
    /// \return ID value or 0 - if ID was not generated
    GLuint   get_bg_id    ( void ) const;
    GLuint   get_bg_width ( void ) const;
    GLuint   get_bg_height( void ) const;
    
    GLuint   get_id    ( size_t idx ) const;
    GLuint   get_width ( size_t idx ) const;
    GLuint   get_height( size_t idx ) const;
    unsigned get_mask  ( size_t idx ) const;


private:

    mutable size_t current_tex_;

    // Background texture (this can be expanded to multiple backgrounds if needed)
    GLuint   bg_id_   ;
    TexDescr bg_descr_;
    
    // Gem textures
    std::vector<GLuint>   id_   ; // Texture ID - generated by OpenGL
    std::vector<TexDescr> descr_;

    // Structure that keeps texture params
    struct TexDescr
    {
        GLuint   width_ ; // Geom. parameters
        GLuint   height_;
        unsigned mask_  ; // Type mask

        TexDescr( void ) : width_(0), height_(0), mask_(0) {}
        TexDescr(GLuint w, GLuint h, unsigned mask) : width_(w), height_(h), mask_(mask) {}
        void clear( void ) {width_ = 0; height_(0); mask_(0);}
    };

private:
    // Loads texture from array, OpenGL generates tex. ID
    bool load_texture( GLuint* img, GLuint w, GLuint h );
};


#endif //TEXTURE_H_

