#ifndef TEXTURE_H_
#define TEXTURE_H_

#include <string>
#include <vector>

class Texture
{
public:

    // Init member variables
    Texture();

    // Clear member variables
    ~Texture();

    // Add a new texture, loads it form pgn-file, sets type/mask
    // mask - texture type identifier
    // png_file - png image full file name
    // returns index or -1 - on error
    int add ( unsigned mask, const std::string& png_file );

    // Deletes loaded textures, 0-s parameters
    void clear(void);

    // Getters - by index of hte vector
    GLuint   get_id    (size_t idx) const;
    GLuint   get_width (size_t idx) const;
    GLuint   get_height(size_t idx) const;
    unsigned get_mask  (size_t idx) const;

private:

    //Texture name
    std::vector<GLuint>   id_; // Texture ID - generated by OpenGL
    std::vector<TexDescr> descr_;

    // Structure that keeps texture params
    struct TexDescr
    {
        GLuint   width_ ; // Geom. parameters
        GLuint   height_;
        unsigned mask_  ; // Type mask
        TexDescr(void) : width_(0), height_(0), mask_(GM_NONE) {}
        TexDescr(GLuint w, GLuint h, unsigned mask) : width_(w), height_(h), mask_(mask) {}
        void clear(void) {width_ = 0; height_(0); mask_(0);}
    };
};


#endif //TEXTURE_H_

