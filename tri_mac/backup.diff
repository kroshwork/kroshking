diff -r 41fcb9c2bdd5 main.cpp
--- a/main.cpp	Thu Dec 18 00:08:16 2014 -0500
+++ b/main.cpp	Thu Dec 18 21:50:49 2014 -0500
@@ -8,8 +8,6 @@
 
 #ifdef __APPLE__
 #include <OpenGL/gl.h>
-//#include <OpenGL/gl3.h>
-//#define __gl_h_
 #include <OpenGL/glu.h>
 #include <GLUT/glut.h>
 #else
@@ -18,199 +16,13 @@
 #include <GL/glut.h>
 #endif
 
-
 /*
-GLuint CreateShader(GLenum eShaderType, const std::string &strShaderFile)
-{
-    GLuint shader = glCreateShader(eShaderType);
-    const char *strFileData = strShaderFile.c_str();
-    glShaderSource(shader, 1, &strFileData, NULL);
-    
-    glCompileShader(shader);
-    
-    GLint status;
-    glGetShaderiv(shader, GL_COMPILE_STATUS, &status);
-    if (status == GL_FALSE)
-    {
-        GLint infoLogLength;
-        glGetShaderiv(shader, GL_INFO_LOG_LENGTH, &infoLogLength);
-        
-        GLchar *strInfoLog = new GLchar[infoLogLength + 1];
-        glGetShaderInfoLog(shader, infoLogLength, NULL, strInfoLog);
-        
-        const char *strShaderType = NULL;
-        switch(eShaderType)
-        {
-            case GL_VERTEX_SHADER: strShaderType = "vertex"; break;
-            case GL_GEOMETRY_SHADER: strShaderType = "geometry"; break;
-            case GL_FRAGMENT_SHADER: strShaderType = "fragment"; break;
-        }
-        
-        fprintf(stderr, "Compile failure in %s shader:\n%s\n", strShaderType, strInfoLog);
-        delete[] strInfoLog;
-    }
-    
-    return shader;
-}
-
-GLuint CreateProgram(const std::vector<GLuint> &shaderList)
-{
-    GLuint program = glCreateProgram();
-    
-    for(size_t iLoop = 0; iLoop < shaderList.size(); iLoop++)
-        glAttachShader(program, shaderList[iLoop]);
-    
-    glLinkProgram(program);
-    
-    GLint status;
-    glGetProgramiv (program, GL_LINK_STATUS, &status);
-    if (status == GL_FALSE)
-    {
-        GLint infoLogLength;
-        glGetProgramiv(program, GL_INFO_LOG_LENGTH, &infoLogLength);
-        
-        GLchar *strInfoLog = new GLchar[infoLogLength + 1];
-        glGetProgramInfoLog(program, infoLogLength, NULL, strInfoLog);
-        fprintf(stderr, "Linker failure: %s\n", strInfoLog);
-        delete[] strInfoLog;
-    }
-    
-    for(size_t iLoop = 0; iLoop < shaderList.size(); iLoop++)
-        glDetachShader(program, shaderList[iLoop]);
-    
-    return program;
-}
-
-GLuint theProgram;
-
-const std::string strVertexShader(
-                                  "#version 410\n"
-                                  "layout(location = 0) in vec4 position;\n"
-                                  "void main()\n"
-                                  "{\n"
-                                  "   gl_Position = position;\n"
-                                  "}\n"
-                                  );
-
-const std::string strFragmentShader(
-                                    "#version 330\n"
-                                    "out vec4 outputColor;\n"
-                                    "void main()\n"
-                                    "{\n"
-                                    "   outputColor = vec4(1.0f, 1.0f, 1.0f, 1.0f);\n"
-                                    "}\n"
-                                    );
-
-void InitializeProgram()
-{
-    std::vector<GLuint> shaderList;
-    
-    shaderList.push_back(CreateShader(GL_VERTEX_SHADER, strVertexShader));
-    shaderList.push_back(CreateShader(GL_FRAGMENT_SHADER, strFragmentShader));
-    
-    theProgram = CreateProgram(shaderList);
-    
-    std::for_each(shaderList.begin(), shaderList.end(), glDeleteShader);
-}
-
-const float vertexPositions[] = {
-    0.75f, 0.75f, 0.0f, 1.0f,
-    0.75f, -0.75f, 0.0f, 1.0f,
-    -0.75f, -0.75f, 0.0f, 1.0f,
-};
-
-GLuint positionBufferObject;
-GLuint vao;
-
-
-void InitializeVertexBuffer()
-{
-    glGenBuffers(1, &positionBufferObject);
-    
-    glBindBuffer(GL_ARRAY_BUFFER, positionBufferObject);
-    glBufferData(GL_ARRAY_BUFFER, sizeof(vertexPositions), vertexPositions, GL_STATIC_DRAW);
-    glBindBuffer(GL_ARRAY_BUFFER, 0);
-}
-
-//Called after the window and OpenGL are initialized. Called exactly once, before the main loop.
-void init()
-{
-    InitializeProgram();
-    InitializeVertexBuffer();
-    
-    glGenVertexArrays(1, &vao);
-    glBindVertexArray(vao);
-}
-
-//Called to update the display.
-//You should call glutSwapBuffers after all of your rendering to display what you rendered.
-//If you need continuous updates of the screen, call glutPostRedisplay() at the end of the function.
-void display()
-{
-    glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
-    glClear(GL_COLOR_BUFFER_BIT);
-    
-    glUseProgram(theProgram);
-    
-    glBindBuffer(GL_ARRAY_BUFFER, positionBufferObject);
-    glEnableVertexAttribArray(0);
-    glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, 0, 0);
-    
-    glDrawArrays(GL_TRIANGLES, 0, 3);
-    
-    glDisableVertexAttribArray(0);
-    glUseProgram(0);
-    
-    glutSwapBuffers();
-}
-
-//Called whenever the window is resized. The new window size is given, in pixels.
-//This is an opportunity to call glViewport or glScissor to keep up with the change in size.
-void reshape (int w, int h)
-{
-    glViewport(0, 0, (GLsizei) w, (GLsizei) h);
-}
-
-//Called whenever a key on the keyboard was pressed.
-//The key is given by the ''key'' parameter, which is in ASCII.
-//It's often a good idea to have the escape key (ASCII value 27) call glutLeaveMainLoop() to 
-//exit the program.
-void keyboard(unsigned char key, int x, int y)
-{
-    switch (key)
-    {
-        case 27:
-        //TODO - do exit    glutLeaveMainLoop();
-            return;
-    }
-}
-
-
-unsigned int defaults(unsigned int displayMode, int &width, int &height) {return displayMode;}
-
-
-int main(int argc, char *argv[])
-{
-    glutInit(&argc, argv);
-    glutInitDisplayMode(GLUT_DOUBLE | GLUT_ALPHA | GLUT_DEPTH | GLUT_STENCIL);
-    glutInitWindowSize(800, 600);
-    glutInitWindowPosition(200, 100);
-    glutCreateWindow(argv[0]);
-    
-    glutDisplayFunc(display);
-    glutReshapeFunc(reshape);
-    init();
-    glutMainLoop();
-    return 0;
-}
-*/
-
-
 
 void display(void) {
     
-    //clear white, draw with black
+    //clear white
     glClearColor(255, 255, 255, 0);
+    //draw with black
     glColor3d(0, 0, 0);
     
     glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
@@ -223,13 +35,77 @@
     glVertex2i(128, 0);
     glEnd();
     
-    //a more useful helper
-    glRecti(200, 200, 250, 250);
+    glutSwapBuffers();
+}*/
+
+void ComputePositionOffsets(float &fXOffset, float &fYOffset)
+{
+    const float fLoopDuration = 5.0f;
+    const float fScale = 3.14159f * 2.0f / fLoopDuration;
+    
+    float fElapsedTime = glutGet(GLUT_ELAPSED_TIME) / 1000.0f;
+    
+    float fCurrTimeThroughLoop = fmodf(fElapsedTime, fLoopDuration);
+    
+    fXOffset = cosf(fCurrTimeThroughLoop * fScale) * 0.5f;
+    fYOffset = sinf(fCurrTimeThroughLoop * fScale) * 0.5f;
+}
+
+const float vertexPositions[] = {
+    0.25f, 0.25f, 0.0f, 1.0f,
+    0.25f, -0.25f, 0.0f, 1.0f,
+    -0.25f, -0.25f, 0.0f, 1.0f,
+};
+
+#define ARRAY_COUNT( array ) (sizeof( array ) / (sizeof( array[0] ) * (sizeof( array ) != sizeof(void*) || sizeof( array[0] ) <= sizeof(void*))))
+
+GLuint positionBufferObject;
+GLuint vao;
+
+void AdjustVertexData(float fXOffset, float fYOffset)
+{
+    std::vector<float> fNewData(ARRAY_COUNT(vertexPositions));
+    memcpy(&fNewData[0], vertexPositions, sizeof(vertexPositions));
+    
+    for(int iVertex = 0; iVertex < ARRAY_COUNT(vertexPositions); iVertex += 4)
+    {
+        fNewData[iVertex] += fXOffset;
+        fNewData[iVertex + 1] += fYOffset;
+    }
+    
+    glBindBuffer(GL_ARRAY_BUFFER, positionBufferObject);
+    glBufferSubData(GL_ARRAY_BUFFER, 0, sizeof(vertexPositions), &fNewData[0]);
+    glBindBuffer(GL_ARRAY_BUFFER, 0);
+}
+
+void display()
+{
+    float fXOffset = 0.0f, fYOffset = 0.0f;
+    ComputePositionOffsets(fXOffset, fYOffset);
+    AdjustVertexData(fXOffset, fYOffset);
+    
+    //clear black
+    glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
+    //draw with white
+    glColor3d(255, 255, 255);
+    glClear(GL_COLOR_BUFFER_BIT);//| GL_DEPTH_BUFFER_BIT
+    
+   // glUseProgram(theProgram);
+    
+    glBindBuffer(GL_ARRAY_BUFFER, positionBufferObject);
+    glEnableVertexAttribArray(0);
+    glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, 0, 0);
+    
+    glDrawArrays(GL_TRIANGLES, 0, 3);
+    
+    glDisableVertexAttribArray(0);
+    glUseProgram(0);
     
     glutSwapBuffers();
-    
+    glutPostRedisplay();
 }
 
+
 void reshape(int width, int height) {
     
     glViewport(0, 0, width, height);
@@ -244,7 +120,7 @@
 
 void idle(void) {
     
-    glutPostRedisplay();
+   // glutPostRedisplay();//TODO
 }
 
 int main(int argc, char *argv[]) {
@@ -274,19 +150,6 @@
 
 
 /*
-int main(int argc, char *argv[])
-{
-
-    
-    glutInit(&argc, argv);
-    glutInitDisplayMode(GLUT_RGB | GLUT_DEPTH | GLUT_DOUBLE | GLUT_3_2_CORE_PROFILE);
-    glutInitWindowSize(800,600);
-    glutCreateWindow("Hello World");
-    glutDisplayFunc(display);
-    glutReshapeFunc(reshape);
-
-
-
     glShadeModel(GL_SMOOTH);
     glBegin(GL_TRIANGLES);
     glColor3f(0.1, 0.2, 0.3);
@@ -296,10 +159,4 @@
     glColor3f(0.7, 0.8, 0.9);
     glVertex3f(0, 1, 0);
     glEnd();
-
-    glutMainLoop();
-
-
-  return 0;
-}
  */
